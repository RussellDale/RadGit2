// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Rad4.Models.Domian
{
    public partial class dbContext : DbContext
    {
        public dbContext()
        {
        }

        public dbContext(DbContextOptions<dbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Bookmark> Bookmark { get; set; }
        public virtual DbSet<CharacterIds> CharacterIds { get; set; }
        public virtual DbSet<Characters> Characters { get; set; }
        public virtual DbSet<Items> Items { get; set; }
        public virtual DbSet<Like> Like { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Bookmark>(entity =>
            {
                entity.ToTable("bookmark");

                entity.HasIndex(e => new { e.Cid, e.Uid }, "IX_bookmark_cid_uid")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cid).HasColumnName("cid");

                entity.Property(e => e.Uid).HasColumnName("uid");
            });

            modelBuilder.Entity<CharacterIds>(entity =>
            {
                entity.ToTable("character_ids");

                entity.HasIndex(e => e.Cid, "IX_character_ids_cid")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Cid)
                    .IsRequired()
                    .HasColumnName("cid");

                entity.Property(e => e.Server)
                    .IsRequired()
                    .HasColumnName("server");
            });

            modelBuilder.Entity<Characters>(entity =>
            {
                entity.ToTable("characters");

                entity.HasIndex(e => new { e.Headgear, e.Hair, e.Face, e.Jacket, e.Pants, e.Shoes, e.Breast, e.Waist, e.Skin, e.Weapon, e.Job }, "IX_characters_headgear_hair_face_jacket_pants_shoes_breast_waist_skin_weapon_job")
                    .IsUnique();

                entity.HasIndex(e => e.Breast, "idx_characters_breast");

                entity.HasIndex(e => e.Face, "idx_characters_face");

                entity.HasIndex(e => e.Hair, "idx_characters_hair");

                entity.HasIndex(e => e.Headgear, "idx_characters_headgear");

                entity.HasIndex(e => e.Jacket, "idx_characters_jacket");

                entity.HasIndex(e => e.Pants, "idx_characters_pants");

                entity.HasIndex(e => e.Shoes, "idx_characters_shoes");

                entity.HasIndex(e => e.Skin, "idx_characters_skin");

                entity.HasIndex(e => e.Waist, "idx_characters_waist");

                entity.HasIndex(e => e.Weapon, "idx_characters_weapon");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Breast).HasColumnName("breast");

                entity.Property(e => e.Face).HasColumnName("face");

                entity.Property(e => e.Hair).HasColumnName("hair");

                entity.Property(e => e.Headgear).HasColumnName("headgear");

                entity.Property(e => e.Jacket).HasColumnName("jacket");

                entity.Property(e => e.Job)
                    .HasColumnName("job")
                    .HasDefaultValueSql("-1");

                entity.Property(e => e.Pants).HasColumnName("pants");

                entity.Property(e => e.Shoes).HasColumnName("shoes");

                entity.Property(e => e.Skin).HasColumnName("skin");

                entity.Property(e => e.Waist).HasColumnName("waist");

                entity.Property(e => e.Weapon).HasColumnName("weapon");
            });

            modelBuilder.Entity<Items>(entity =>
            {
                entity.ToTable("items");

                entity.HasIndex(e => e.Name, "idx_item_name")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name");

                entity.Property(e => e.Part).HasColumnName("part");
            });

            modelBuilder.Entity<Like>(entity =>
            {
                entity.ToTable("like");

                entity.HasIndex(e => new { e.Cid, e.Uid }, "IX_like_cid_uid")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cid).HasColumnName("cid");

                entity.Property(e => e.CreatedAt)
                    .IsRequired()
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("current_timestamp");

                entity.Property(e => e.Uid).HasColumnName("uid");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}