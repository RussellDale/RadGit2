@using Rad2.Data
@using Rad2.Policy
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@using System.Security.Policy
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<IdentityUser> _userManagers
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <Authorized>
        <a href="Identity/Account/Manage">Hello, @context.User.Identity?.Name</a>
        @if (crudpGet.Admin == true)
        {
            <a href="admin">@UserRoles(context).Id.ToString(rolesValue)</a>
        }
        else
        {
            <a href="/">@UserRoles(context).Id.ToString(rolesValue)</a>
        }    
        <form method="post" action="Identity/Account/LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">Register</a>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
//    @inject IJSRuntime JsRuntime
//    string messagePrompt = "";
    string rolesValue = "";
    CrudpRequirement crudpGet = new CrudpRequirement(true, true, true, true, true, true);

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState context = await _authenticationStateProvider.GetAuthenticationStateAsync();
        CrudpHandler crudpHandler = new CrudpHandler();
        await crudpHandler.HandleRequirementAsync2(context, crudpGet);

        await base.OnInitializedAsync();
    }

    public async Task UserRoles(AuthenticationState context)
    {
        IdentityUser user = await _userManagers.GetUserAsync(context.User);
        IList<string> gRoles = await _userManagers.GetRolesAsync(user);
        
        NameRequirement nameGet = new NameRequirement("*");
        NameHandler nameHandler = new NameHandler();
        await nameHandler.HandleRequirementAsync2(context, nameGet);
        
        foreach(var role in gRoles)
        {
            if (rolesValue.Length > 0)
                rolesValue += " - ";

            rolesValue += role;

            if (nameGet.IsName() == true) rolesValue += "*";           
        }

        if (rolesValue.Length == 0)
            rolesValue = "n/a";
//        else
//        {
//            foreach (var claim in context.User.Claims)
//                messagePrompt += claim.Type + " : " + claim.Value + "\n";
//
//            await JsRuntime.InvokeVoidAsync("alert", messagePrompt);
//        }

        await Task.CompletedTask;
    }
}
