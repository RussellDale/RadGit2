@using Rad2.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@using System.Security.Policy
@using Microsoft.AspNetCore.Components.Forms

@inject UserManager<IdentityUser> _userManagers

<AuthorizeView>
    <Authorized>
        <a href="Identity/Account/Manage">Hello, @context.User.Identity?.Name</a><a href="adminpage">@UserClaims(context).Id.ToString(claimValue)</a>
        <form method="post" action="Identity/Account/LogOut">
            <button type="submit" class="nav-link btn btn-link">Log out</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">Register</a>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    @inject IJSRuntime JsRuntime
    string messagePrompt = "";
    string claimValue = "";

    public async Task UserClaims(AuthenticationState context)
    {
        IdentityUser user = await _userManagers.GetUserAsync(context.User);
        IList<string> gRoles = await _userManagers.GetRolesAsync(user);

        foreach(var role in gRoles)
        {
            if (claimValue.Length > 0)
                claimValue += " - ";

            claimValue += role;
        }

        if (claimValue.Length == 0)
            claimValue = "n/a";

        foreach(var claim in context.User.Claims)
            messagePrompt += claim.Type + " : " + claim.Value  + "\n";

//        await Task.CompletedTask;
        await JsRuntime.InvokeVoidAsync("alert", messagePrompt);
    }
}
