@page "/adminpage"

@using Rad2.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms

@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _userManagers
@inject SignInManager<IdentityUser> _signInManagers

<h3>Admin Page</h3>

<EditForm Model="newUser" OnValidSubmit="@AddUserWithRole">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <div class="form-group row">
        <label for="login" class="col-sm-2 col-form-label">
            Add User
        </label>
        <div class="col-sm-10">
            <InputText id="login" @bind-Value="newUser.LoginName"></InputText>
        </div>
    </div>
    <div class="form-group row">
        <label for="role-select" class="col-sm-2 col-form-label">
            Assign Role
        </label>
        <div class="col-sm-10">
            <InputSelect id="role-select" @bind-Value="newUser.UserRole">
                @foreach (var role in selectList)
                {
                    <option value="@role.Value" selected=@role.Selected>@role.Text</option>
                }
            </InputSelect>
        </div>
    </div>
    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>

@code {
    User newUser = new User();
    List<Role> roleList = new List<Role>();
    List<SelectListItem> selectList = new List<SelectListItem>();

    protected override async Task OnInitializedAsync()
    {
        roleList = new List<Role>()
        {
            new Role() { RoleName = "Admin",   ID = "1" },
            new Role() { RoleName = "HR",      ID = "2" },
            new Role() { RoleName = "Manager", ID = "3" },
            new Role() { RoleName = "User",    ID = "4" }
        };

        foreach (Role role in roleList)
            selectList.Add(new SelectListItem() { Text = role.RoleName, Value = role.ID, Selected = false });

        await base.OnInitializedAsync();
    }

    public async void AddUserWithRole(EditContext context)
    {
        var usermodel = context.Model as User;
        var user = new IdentityUser { UserName = usermodel.LoginName, Email = usermodel.LoginName, EmailConfirmed = true };
        var messagePrompt = "Failed";
        var result = await _userManagers.CreateAsync(user, "Abc123456789!");

        if (result.Succeeded)
        {
            messagePrompt = "User was added";
            var getRoleFromList = roleList.FirstOrDefault(x => x.ID == usermodel?.UserRole);
            var roleAddedResult = await _userManagers.AddToRoleAsync(user, getRoleFromList?.RoleName ?? "User");

            if(roleAddedResult.Succeeded)
                messagePrompt += " - Role was added";

            var claimAddedResult = await _userManagers.AddClaimAsync(user, new Claim(getRoleFromList?.RoleName ?? "User", getRoleFromList?.ID ?? ""));
 
            if (claimAddedResult.Succeeded)
                messagePrompt += " - Claim was added";
        }
        await JsRuntime.InvokeVoidAsync("alert", messagePrompt);
    }
}
