@page "/admin"

@using Rad2.Data
@using Rad2.Policy
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@using System.Security.Policy
@using Microsoft.AspNetCore.Components.Forms

@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _userManagers
@inject SignInManager<IdentityUser> _signInManagers
@inject RoleManager<IdentityRole> _roleManagers

<AuthorizeView>
    <Authorized>
        @User(context).Id.ToString(claimValue)
        <h3>Admin Page</h3>
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

<EditForm Model="newUser" OnValidSubmit="@AddUserWithRole">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <div class="form-group row">
        <label for="role-select" class="col-sm-2 col-form-label">
            Assign Role
        </label>
        <div class="col-sm-10">
            <InputSelect id="role-select" @bind-Value="newUser.UserRole">
                @foreach (SelectListItem role in selectList)
                {
                    <option value="@role.Value" selected=@role.Selected>@role.Text</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <table>
            <tr><th>Create</th><th>Read</th><th>Update</th><th>Delete</th><th>Print</th><th>Name</th></tr>
            <tr>
                <td>@if (crudp.Create == true) { <input type="checkbox" checked="checked" name="cbCreate" /> } else { <input type="checkbox" name="cbCreate" /> }</td>
                <td>@if (crudp.Read == true)   { <input type="checkbox" checked="checked" name="cbRead" /> }   else { <input type="checkbox" name="cbRead" /> }</td>
                <td>@if (crudp.Update == true) { <input type="checkbox" checked="checked" name="cbUpdate" /> } else { <input type="checkbox" name="cbUpdate" /> }</td>
                <td>@if (crudp.Delete == true) { <input type="checkbox" checked="checked" name="cbDelete" /> } else { <input type="checkbox" name="cbDelete" /> }</td>
                <td>@if (crudp.Print == true)  { <input type="checkbox" checked="checked" name="cbPrint" /> }  else { <input type="checkbox" name="cbPrint" /> }</td>
                <td><input type="text" name="textName" style="text-align: left;" /></td>
            </tr>
        </table>
    </div>
    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>

@messagePrompt

@code {
    UserData newUser = new UserData();
    List<SelectListItem> selectList = new List<SelectListItem>();
    ClaimsPrincipal cpUser = new ClaimsPrincipal();
    CrudpRequirement crudp = new CrudpRequirement(true, true, true, true, true);
    string claimValue = "\n";
    string messagePrompt = "";

    protected override async Task OnInitializedAsync()
    {
        IQueryable<IdentityRole> lRoles = _roleManagers.Roles;

        foreach(IdentityRole role in lRoles)
            selectList.Add(new SelectListItem() { Value = role.Id, Text = role.Name, Selected = false });

        selectList.Add(new SelectListItem() { Value = "0", Text = "n/a", Selected = false });

        await base.OnInitializedAsync();
    }

    public async Task User(AuthenticationState context)
    {
        cpUser = context.User;
        CrudpHandler crudpHandler = new CrudpHandler();
        await crudpHandler.HandleRequirementAsync2(context, crudp);

        foreach (var claim in context.User.Claims)
            messagePrompt += claim.Type + " : " + claim.Value + "\n";

        await Task.CompletedTask;
    }

    public async void AddUserWithRole(EditContext context)
    {
        UserData? usermodel = context.Model as UserData;
        IdentityResult result = new IdentityResult();
        IQueryable<IdentityRole> roles = _roleManagers.Roles;
        IdentityRole role = new IdentityRole();
        string sRoles1 = "n/a", sRoles2 = "n/a";

        foreach (IdentityRole role1 in roles)
        {
            if (usermodel?.UserRole == role1.Id)
            {
                role = role1;
                sRoles1 = role.Name;
                break;
            }
        }

        IdentityUser user = await _userManagers.GetUserAsync(cpUser);
        IList<string> gRoles = await _userManagers.GetRolesAsync(user);

        if (gRoles.Count == 0) { }
        else
        {
            sRoles2 = gRoles[0];
            IdentityResult rRole = await _userManagers.RemoveFromRolesAsync(user, gRoles);
            IList<Claim> gClaimsEx = await _userManagers.GetClaimsAsync(user);
            IdentityResult rClaim = await _userManagers.RemoveClaimsAsync(user, gClaimsEx);
        }

        if (sRoles1 == "n/a") { }
        else
        {
            IList<Claim> gClaims = await _roleManagers.GetClaimsAsync(role);
            IdentityResult aRole = await _userManagers.AddToRoleAsync(user, role.Name);
            IdentityResult aClaims = await _userManagers.AddClaimsAsync(user, gClaims);
        }
        
        await JsRuntime.InvokeVoidAsync("alert", sRoles1 + " => " + sRoles2 + "\nLog out, Log in - NOW!");
    }
}
