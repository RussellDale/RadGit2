@page "/admin"

@using Rad2.Data
@using Rad2.Policy
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@using System.Security.Policy
@using Microsoft.AspNetCore.Components.Forms

@inject IJSRuntime JsRuntime
@inject UserManager<IdentityUser> _userManagers
@inject SignInManager<IdentityUser> _signInManagers
@inject RoleManager<IdentityRole> _roleManagers
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <Authorized>
        @if (crudpGet.Admin == true)
        {
            @User(context).Id.ToString(claimValue)
            <h3>Admin Page</h3>
        }
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@if (crudpGet.Admin == true)
{
    <EditForm Model="newUser" OnValidSubmit="@AddUserWithRole">
        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
        <div class="form-group row">
            <table>
                <tr><th>Assign Role</th><th>User</th></tr>
                <tr>
                    <td>
                        <div class="col-sm-10">
                            <InputSelect id="role-select" @bind-Value="newUser.UserRole">
                                @foreach (SelectListItem role in selectList)
                                {
                                    <option value="@role.Value" selected=@role.Selected>@role.Text</option>
                                }
                            </InputSelect>
                        </div>
                    </td>
                    <td>
                        <div class="col-sm-10">
                            <InputSelect id="user-select" TValue="string"
                                         Value="newUser.Text"
                                         ValueChanged="UserCrudp1"
                                         ValueExpression="@(() => newUser.Text)">
                                @foreach (SelectListItem user in selectUsers)
                                {
                                    <option value="@user.Value">@user.Text</option>
                                }
                            </InputSelect>
                        </div>
                    </td>
                </tr>
            </table>
        </div>

        <div class="form-group row">
            <table>
                <tr><th>Create</th><th>Read</th><th>Update</th><th>Delete</th><th>Print</th><th>Admin</th><th>Name</th></tr>
                <tr>
                    <td><InputCheckbox id="cbCreateId"   @bind-Value="newUser.Create" /></td>
                    <td><InputCheckbox id="cbReadId"     @bind-Value="newUser.Read"   /></td>
                    <td><InputCheckbox id="cbUpdateId"   @bind-Value="newUser.Update" /></td>
                    <td><InputCheckbox id="cbDeleteId"   @bind-Value="newUser.Delete" /></td>
                    <td><InputCheckbox id="cbPrintId"    @bind-Value="newUser.Print"  /></td>
                    <td><InputCheckbox id="cbAdminId"    @bind-Value="newUser.Admin"  /></td>
                    <td><InputText     id="textName"     @bind-Value="newUser.Name" style="text-align: left;"  /></td>
                </tr>
            </table>
        </div>

        <input type="submit" class="btn btn-primary" value="Save" />

    </EditForm>
}

@messagePrompt

@code {
    UserData newUser = new UserData();
    IQueryable<IdentityUser> users = null;
    List<SelectListItem> selectList = new List<SelectListItem>();
    List<SelectListItem> selectUsers = new List<SelectListItem>();
    ClaimsPrincipal cpUser = new ClaimsPrincipal();
    CrudpRequirement crudpGet = new CrudpRequirement(true, true, true, true, true, true);
    NameRequirement nameGet = new NameRequirement("*");
    string claimValue = "\n";
    string messagePrompt = "";

    private void UserCrudp1(string selectedValue)
    {
        UserCrudp2(selectedValue);

        //        await UserCrudp();

    }

    private async void UserCrudp2(string selectedValue)
    {
        string newUserValue = string.Empty;
        CrudpRequirement crudpGet2 = new CrudpRequirement(true, true, true, true, true, true);

        foreach (IdentityUser user in users)
        {
            if (user.Id == selectedValue)
            {
                newUserValue = user.Email;

                IList<Claim> claims = await _userManagers.GetClaimsAsync(user);

                CrudpHandler crudpHandler = new CrudpHandler();
                await crudpHandler.HandleRequirementAsync3(claims, crudpGet2);

                break;
            }
        }

        if (crudpGet2.Create == false) newUser.Create = false;
        if (crudpGet2.Read == false) newUser.Read = false;
        if (crudpGet2.Update == false) newUser.Update = false;
        if (crudpGet2.Delete == false) newUser.Delete = false;
        if (crudpGet2.Print == false) newUser.Print = false;
        if (crudpGet2.Admin == false) newUser.Admin = false;

        newUser.Name = nameGet.Name;
        newUser.Text = selectedValue;

    }

    public async Task UserCrudp()
    {
        if (crudpGet.Create == false) newUser.Create = false;
        if (crudpGet.Read   == false) newUser.Read   = false;
        if (crudpGet.Update == false) newUser.Update = false;
        if (crudpGet.Delete == false) newUser.Delete = false;
        if (crudpGet.Print  == false) newUser.Print  = false;
        if (crudpGet.Admin  == false) newUser.Admin  = false;

        newUser.Name = nameGet.Name;

        bool bSelected = false;
        string sRoles = string.Empty;

        AuthenticationState context = await _authenticationStateProvider.GetAuthenticationStateAsync(); 

        IdentityUser gUser = await _userManagers.GetUserAsync(context.User);
        newUser.Text = gUser.Email;

        IList<string> gRoles = await _userManagers.GetRolesAsync(gUser);

        if (gRoles.Count == 0) { } else sRoles = gRoles[0];

        IQueryable<IdentityRole> lRoles = _roleManagers.Roles;
        selectList = new List<SelectListItem>();

        foreach (IdentityRole role in lRoles)
        {
            if (sRoles == role.Name) bSelected = true;
            selectList.Add(new SelectListItem() { Value = role.Id, Text = role.Name, Selected = bSelected });
            bSelected = false;
        }

        selectList.Add(new SelectListItem() { Value = "0", Text = "n/a", Selected = false });

        newUser.UserRole = sRoles;

        await Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        bool isName = nameGet.IsName();
        await JsRuntime.InvokeVoidAsync("alert", isName);

        AuthenticationState context = await _authenticationStateProvider.GetAuthenticationStateAsync();
        CrudpHandler crudpHandler = new CrudpHandler();
        await crudpHandler.HandleRequirementAsync2(context, crudpGet);

        NameHandler nameHandler = new NameHandler();
        await nameHandler.HandleRequirementAsync2(context, nameGet);

        await UserCrudp();

        users = _userManagers.Users;

        foreach (IdentityUser user in users)
            selectUsers.Add(new SelectListItem() { Value = user.Id, Text = user.UserName });

        await base.OnInitializedAsync();
  
        await Task.CompletedTask;
    }

    public async Task User(AuthenticationState context)
    {
        cpUser = context.User;

        foreach (var claim in context.User.Claims)
            messagePrompt += claim.Type + " : " + claim.Value + "\n";

        await Task.CompletedTask;
    }

    public async void AddUserWithRole(EditContext context)
    {
        UserData? usermodel = context.Model as UserData;
        IdentityResult result = new IdentityResult();
        IQueryable<IdentityRole> roles = _roleManagers.Roles;
        IdentityRole role = new IdentityRole();
        string sRoles1 = "n/a", sRoles2 = "n/a";

        foreach (IdentityRole role1 in roles)
        {
            if (usermodel?.UserRole == role1.Id || usermodel?.UserRole == role1.Name)
            {
                role = role1;
                sRoles1 = role.Name;
                break;
            }
        }

        IdentityUser user = await _userManagers.GetUserAsync(cpUser);
        IList<string> gRoles = await _userManagers.GetRolesAsync(user);

        if (gRoles.Count == 0) { }
        else
        {
            sRoles2 = gRoles[0];
            result = await _userManagers.RemoveFromRolesAsync(user, gRoles);
            IList<Claim> gClaimsEx = await _userManagers.GetClaimsAsync(user);
            result = await _userManagers.RemoveClaimsAsync(user, gClaimsEx);
        }

        if (sRoles1 == "n/a") { }
        else
        {
            IList<Claim> gClaims = await _roleManagers.GetClaimsAsync(role);
            result = await _userManagers.AddToRoleAsync(user, role.Name);
            result = await _userManagers.AddClaimsAsync(user, gClaims);

            Claim? claim = gClaims.First(c => c.Type == "CRUDP");

            if (claim is not null)
            {
                result = await _userManagers.RemoveClaimAsync(user, claim);

                string sCreate = newUser.Create == false ? "0" : "1";
                string sRead   = newUser.Read   == false ? "0" : "1";
                string sUpdate = newUser.Update == false ? "0" : "1";
                string sDelete = newUser.Delete == false ? "0" : "1";
                string sPrint  = newUser.Print  == false ? "0" : "1";
                string sAdmin  = newUser.Admin  == false ? "0" : "1";


                claim = new Claim("CRUDP", sCreate + sRead + sUpdate + sDelete + sPrint + sAdmin);

                result = await _userManagers.AddClaimAsync(user, claim);
            }
            
             claim = gClaims.First(c => c.Type == "Name");

             if (claim is not null)
             {
                 result = await _userManagers.RemoveClaimAsync(user, claim);
                 claim = new Claim("Name", newUser.Name);
                 result = await _userManagers.AddClaimAsync(user, claim);
             }
        }
        
        await JsRuntime.InvokeVoidAsync("alert", sRoles2 + " => " + sRoles1 + "\nLog out, Log in - NOW!");
    }
}
