@page "/instructorcomponent"
@attribute [Authorize(Roles = "SuperAdmin, Admin, ReadOnly, Instructor, OfficeAssignment")]
@attribute [Authorize(Policy = "Crudp")]

@using GridMvc.Demo.Resources
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using System
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@using System.Timers
@using System.Security.Claims
@using Rad2.Models.Domian
@using Rad2.Services
@using Rad2.Policy

@inject IInstructorService instructorService
@inject ICourseAssignmentService courseAssignmentService
@inject ICourseService courseService
@inject IDepartmentService departmentService
@inject IPrintingService printingService
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
    <Authorizing>
        <p><em>Loading...</em></p>
    </Authorizing>
    <Authorized>
        @if (_task.IsCompleted)
        {
            <div class="font-italic small">
                <div class="col-sm-12 table-sm">
                    <GridComponent T="Instructor" Grid="@_grid"></GridComponent>
                </div>
            </div>

            @if (crudp.Print == true)
            {
                <button @onclick="Print">Print</button>
            }
        }
        else
        {
            <p><em>Loading...</em></p>
        }
    </Authorized>
</AuthorizeView>
@code
{
    private CGrid<Instructor> _grid;
    private Task _task;
    Timer timer;
    private GridComponent<Instructor> _gridComponent;
    CrudpRequirement crudp = new CrudpRequirement(true, true, true, true, true);

    private void Print()
    {
        string err = "You must select the row you want to print";

        if (instructor.Id == 0)
        {

        }
        else
        {
            string rawHtml1 = null;

            IEnumerable<CourseAssignment> courseAssignments = courseAssignmentService.GetForInstructorId(instructor.Id);

            foreach (var courseAssignment in courseAssignments)
            {
                rawHtml1 = rawHtml1 + "<h3>" + courseAssignment.Course.Title + " / " + 
                                      courseAssignment.Course.Department.Name + " (" +
                                      courseAssignment.Course.Credits + ")</h3>";
            }

            string hireDate = string.Format("{0:d}", instructor.HireDate);
            string location = "n/a";

            if (instructor.OfficeAssignment != null)
                location = instructor.OfficeAssignment.Location;

            string rawHtml = string.Join(
              Environment.NewLine,
              "<h1>Instructor - " + instructor.FirstName + " " + instructor.LastName + "</h1>",
              "<h3>Start Date: " + hireDate + "</h3>",
              "<h3>Location: " + location + "</h3><hr>",
              rawHtml1
            );

            printingService.Print(rawHtml, PrintType.RawHtml);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        AuthenticationState context = await _authenticationStateProvider.GetAuthenticationStateAsync();
        CrudpHandler crudpHandler = new CrudpHandler();
        await crudpHandler.HandleRequirementAsync2(context, crudp);

        Action<IGridColumnCollection<CourseAssignment>> courseAssignmentColumns = c =>
        {
                                        /*
                                        c.Add(o => o.Course.DepartmentId, false).Titled("Department")
                                        .SetWidth(250).RenderValueAs(o => o.Course.Department == null ? "" : o.Course.Department.Name)
                                        .SetSelectField(true, o => o.Course.DepartmentId == null ? "" : o.Course.Department.DepartmentId.ToString() + " - " +
                                                          o.Course.Department.Name,
                                                          departmentService.GetAllDepartment)
                                        .SetListFilter(departmentService.GetAllDepartment(), true, true);
            */
            c.Add(o => o.CourseId, true).Titled("Title").SetPrimaryKey(true)//.SetWidth(50)
                .SetWidth(250).RenderValueAs(o => o.Course == null ? "" : o.Course.Title)
                .SetSelectField(true, o => o.Course == null ? "" : o.Course.CourseId.ToString() + " - " +
                                o.Course.Title,
                                courseService.GetAllCourse)
                .SetListFilter(courseService.GetAllCourse(), true, false);
            c.Add(o => o.InstructorId, true).SetPrimaryKey(true, false).SetCrudHidden(true);
            c.Add(o => o.Course.Title, false).Titled("Title").SetCrudHidden(true);
        };

        Action<IGridColumnCollection<Instructor>> instructorColumns = c =>
        {
            c.Add(o => o.Id, true).SetPrimaryKey(true).Titled(SharedResource.Number).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.FirstName, false).Titled("First Name");
            c.Add(o => o.LastName, false).Titled("Last Name");
            c.Add(o => o.HireDate, false).Titled("Hire Date").Format("{0:yyyy-MM-dd}");
            c.Add(o => o.OfficeAssignment.Location, false).Titled("Location")
              .RenderValueAs(o => o.OfficeAssignment == null ? "" : o.OfficeAssignment.Location);
        };

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;
        var query = new QueryDictionary<StringValues>();

        Func<object[], Task<ICGrid>> subGrids = async keys =>
         {
             int Id = Int32.Parse(keys[0].ToString());
             var subGridClient = new GridClient<CourseAssignment>(q => courseAssignmentService.GetCourseAssignmentGridRow(courseAssignmentColumns, query, Id),
                 query, false, "courseGrid" + Id, courseAssignmentColumns, locale)
                 .WithGridItemsCount()
                 .Selectable(true)
                 .Sortable(true)
                 .SetHeaderCrudButtons(true)
                 .Crud(crudp.Create, crudp.Read, crudp.Update, crudp.Delete, courseAssignmentService)
                 .SetStriped(true)
             ;

             await subGridClient.UpdateGrid();
             return subGridClient.Grid;
         };

        var client = new GridClient<Instructor>(q => instructorService.GetInstructorGridRow(instructorColumns, query), query, false,
            "instructorGrid", instructorColumns, locale)
            .Sortable()
            .Filterable()
            .SetKeyboard(true)
            .Groupable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .Searchable(true, false)
            .WithGridItemsCount()
            .ChangePageSize(true)
            .Selectable(true)
            .Crud(crudp.Create, crudp.Read, crudp.Update, crudp.Delete, instructorService)
            .SetHeaderCrudButtons(true)
            .SetStriped(true)
            .SubGrid(subGrids, ("Id", "InstructorId"))
            .SetDeleteConfirmation(true)
            ;

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;

        Start();
    }
    public void Start()
    {
        if (timer == null)
        {
            timer = new Timer();
            timer.Interval = 500;
            timer.Elapsed += TimerOnElapsed;
        }

        timer.Start();
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        if (timer != null && _gridComponent != null)
        {
            timer.Stop();
            Dispose();

            _gridComponent.OnRowClicked = OnRowClicked;
        }
        else
            _gridComponent = _grid.GridComponent;
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }

    Instructor instructor = new Instructor();
    protected async void OnRowClicked(object item)
    {
        if (item != null)
        {
            if (item.GetType() == typeof(Instructor))
            {
                instructor = (Instructor)item;
            }
        }
    }
}
