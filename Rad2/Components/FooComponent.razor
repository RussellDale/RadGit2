@page "/foocomponent"
@attribute [Authorize(Roles = "Admin, Foo")];

@using GridMvc.Demo.Resources
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using System
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@using Rad2.Models.Domian
@using Rad2.Services

@inject IStudentService fooService
<AuthorizeView>
    <NotAuthorized>
        <a href="Identity/Account/Login">Log in</a>
    </NotAuthorized>
    <Authorizing>
        <p><em>Loading...</em></p>
    </Authorizing>
    <Authorized>
        @if (_task.IsCompleted)
        {
            <div class="font-italic small">
                <div class="col-sm-12 table-sm">
                    <GridComponent T="Student" Grid="@_grid"></GridComponent>
                </div>
            </div>
        }
        else
        {
            <p><em>Loading...</em></p>
        }
    </Authorized>
</AuthorizeView>
@code
{
    private CGrid<Student> _grid;
    private Task _task;
    Func<object[], Task<ICGrid>> subEx;

    protected override async Task OnParametersSetAsync()
    {
        Action<IGridColumnCollection<Student>> fooColumns = c =>
        {
            c.Add(o => o.Id, false).SetPrimaryKey(true).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.FirstName, false).Titled("First Name");
            c.Add(o => o.LastName, false).Titled("Last Name");
            c.Add(o => o.EnrollmentDate, false).Titled("Enrollment Date").Format("{0:yyyy-MM-dd}");
        };

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;
        var query = new QueryDictionary<StringValues>();

        Func<object[], Task<ICGrid>> subGrids = async keys =>
         {
             int Id = Int32.Parse(keys[0].ToString());
             var subGridClient = new GridClient<Student>(q => fooService.GetStudentGridRow(fooColumns, query),
                 query, false, "fooGrid" + Id, fooColumns, locale)
                .SubGrid(subEx, ("Id", "Id"))
             ;

             await subGridClient.UpdateGrid();
             return subGridClient.Grid;
         };

        subEx = subGrids;

        var client = new GridClient<Student>(q => fooService.GetStudentGridRow(fooColumns, query), 
            query, false, "fooGrid", fooColumns, locale)
            .SubGrid(subGrids, ("Id", "Id"))
            ;

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
    }
}