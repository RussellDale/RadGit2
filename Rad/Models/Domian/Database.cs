// Licence file C:\Users\Synapse\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.Sqlite;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using RadShared.Data;
using Npgsql.NameTranslation;
using System.Text;

namespace Rad.Models.Domian
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Album> Albums { get; set; } // Album
        DbSet<Artist> Artists { get; set; } // Artist
        DbSet<Customer> Customers { get; set; } // Customer
        DbSet<Employee> Employees { get; set; } // Employee
        DbSet<Genre> Genres { get; set; } // Genre
        DbSet<Invoice> Invoices { get; set; } // Invoice
        DbSet<InvoiceLine> InvoiceLines { get; set; } // InvoiceLine
        DbSet<MediaType> MediaTypes { get; set; } // MediaType
        DbSet<Playlist> Playlists { get; set; } // Playlist
        DbSet<PlaylistTrack> PlaylistTracks { get; set; } // PlaylistTrack
        DbSet<Track> Tracks { get; set; } // Track

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<Album> Albums { get; set; } // Album
        public DbSet<Artist> Artists { get; set; } // Artist
        public DbSet<Customer> Customers { get; set; } // Customer
        public DbSet<Employee> Employees { get; set; } // Employee
        public DbSet<Genre> Genres { get; set; } // Genre
        public DbSet<Invoice> Invoices { get; set; } // Invoice
        public DbSet<InvoiceLine> InvoiceLines { get; set; } // InvoiceLine
        public DbSet<MediaType> MediaTypes { get; set; } // MediaType
        public DbSet<Playlist> Playlists { get; set; } // Playlist
        public DbSet<PlaylistTrack> PlaylistTracks { get; set; } // PlaylistTrack
        public DbSet<Track> Tracks { get; set; } // Track


        public static DbProvider DbProvider = DbProvider.Sqlite;
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            switch (DbProvider)
            {
                case DbProvider.SqlServer:
                    if (!optionsBuilder.IsConfigured)
                    {
                        optionsBuilder.UseSqlServer(@"Server=.\SQLEXPRESS;Initial Catalog=Northwind1;Integrated Security=True;MultipleActiveResultSets=True");
                    }
                    break;

                case DbProvider.Sqlite:
                default:
                    optionsBuilder.UseSqlite(@"Data Source = /home/runner/RadGit2/Rad/chinook.db;");
//                    optionsBuilder.UseSqlite(@"Data Source = \chinook.db;");
                    break;
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new AlbumConfiguration());
            modelBuilder.ApplyConfiguration(new ArtistConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new EmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new GenreConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceConfiguration());
            modelBuilder.ApplyConfiguration(new InvoiceLineConfiguration());
            modelBuilder.ApplyConfiguration(new MediaTypeConfiguration());
            modelBuilder.ApplyConfiguration(new PlaylistConfiguration());
            modelBuilder.ApplyConfiguration(new PlaylistTrackConfiguration());
            modelBuilder.ApplyConfiguration(new TrackConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<Album> Albums { get; set; } // Album
        public DbSet<Artist> Artists { get; set; } // Artist
        public DbSet<Customer> Customers { get; set; } // Customer
        public DbSet<Employee> Employees { get; set; } // Employee
        public DbSet<Genre> Genres { get; set; } // Genre
        public DbSet<Invoice> Invoices { get; set; } // Invoice
        public DbSet<InvoiceLine> InvoiceLines { get; set; } // InvoiceLine
        public DbSet<MediaType> MediaTypes { get; set; } // MediaType
        public DbSet<Playlist> Playlists { get; set; } // Playlist
        public DbSet<PlaylistTrack> PlaylistTracks { get; set; } // PlaylistTrack
        public DbSet<Track> Tracks { get; set; } // Track

        public FakeMyDbContext()
        {
            _database = null;

            Albums = new FakeDbSet<Album>("AlbumId");
            Artists = new FakeDbSet<Artist>("ArtistId");
            Customers = new FakeDbSet<Customer>("CustomerId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            Genres = new FakeDbSet<Genre>("GenreId");
            Invoices = new FakeDbSet<Invoice>("InvoiceId");
            InvoiceLines = new FakeDbSet<InvoiceLine>("InvoiceLineId");
            MediaTypes = new FakeDbSet<MediaType>("MediaTypeId");
            Playlists = new FakeDbSet<Playlist>("PlaylistId");
            PlaylistTracks = new FakeDbSet<PlaylistTrack>("PlaylistId", "TrackId");
            Tracks = new FakeDbSet<Track>("TrackId");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        public override IEntityType EntityType => throw new NotImplementedException();

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Album
    public class Album
    {
        public int AlbumId { get; set; } // AlbumId (Primary key)
        public string Title { get; set; } // Title (length: 160)
        public int ArtistId { get; set; } // ArtistId

        // Reverse navigation

        /// <summary>
        /// Child Tracks where [Track].[AlbumId] point to this entity (FK__Track__AlbumId__3D5E1FD2)
        /// </summary>
        public virtual ICollection<Track> Tracks { get; set; } // Track.FK__Track__AlbumId__3D5E1FD2

        // Foreign keys

        /// <summary>
        /// Parent Artist pointed by [Album].([ArtistId]) (FK__Album__ArtistId__2A4B4B5E)
        /// </summary>
        public virtual Artist Artist { get; set; } // FK__Album__ArtistId__2A4B4B5E

        public Album()
        {
            Tracks = new List<Track>();
        }
    }

    // Artist
    public class Artist
    {
        public int ArtistId { get; set; } // ArtistId (Primary key)
        public string Name { get; set; } // Name (length: 120)

        // Reverse navigation

        /// <summary>
        /// Child Albums where [Album].[ArtistId] point to this entity (FK__Album__ArtistId__2A4B4B5E)
        /// </summary>
        public virtual ICollection<Album> Albums { get; set; } // Album.FK__Album__ArtistId__2A4B4B5E

        public Artist()
        {
            Albums = new List<Album>();
        }
    }

    // Customer
    public class Customer
    {
        public int CustomerId { get; set; } // CustomerId (Primary key)
        public string FirstName { get; set; } // FirstName (length: 40)
        public string LastName { get; set; } // LastName (length: 20)
        public string Company { get; set; } // Company (length: 80)
        public string Address { get; set; } // Address (length: 70)
        public string City { get; set; } // City (length: 40)
        public string State { get; set; } // State (length: 40)
        public string Country { get; set; } // Country (length: 40)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Phone { get; set; } // Phone (length: 24)
        public string Fax { get; set; } // Fax (length: 24)
        public string Email { get; set; } // Email (length: 60)
        public int? SupportRepId { get; set; } // SupportRepId

        // Reverse navigation

        /// <summary>
        /// Child Invoices where [Invoice].[CustomerId] point to this entity (FK__Invoice__Custome__38996AB5)
        /// </summary>
        public virtual ICollection<Invoice> Invoices { get; set; } // Invoice.FK__Invoice__Custome__38996AB5

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [Customer].([SupportRepId]) (FK__Customer__Suppor__36B12243)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK__Customer__Suppor__36B12243

        public Customer()
        {
            Invoices = new List<Invoice>();
        }
    }

    // Employee
    public class Employee
    {
        public int EmployeeId { get; set; } // EmployeeId (Primary key)
        public string LastName { get; set; } // LastName (length: 20)
        public string FirstName { get; set; } // FirstName (length: 20)
        public string Title { get; set; } // Title (length: 30)
        public int? ReportsTo { get; set; } // ReportsTo
        public DateTime? BirthDate { get; set; } // BirthDate
        public DateTime? HireDate { get; set; } // HireDate
        public string Address { get; set; } // Address (length: 70)
        public string City { get; set; } // City (length: 40)
        public string State { get; set; } // State (length: 40)
        public string Country { get; set; } // Country (length: 40)
        public string PostalCode { get; set; } // PostalCode (length: 10)
        public string Phone { get; set; } // Phone (length: 24)
        public string Fax { get; set; } // Fax (length: 24)
        public string Email { get; set; } // Email (length: 60)

        // Reverse navigation

        /// <summary>
        /// Child Customers where [Customer].[SupportRepId] point to this entity (FK__Customer__Suppor__36B12243)
        /// </summary>
        public virtual ICollection<Customer> Customers { get; set; } // Customer.FK__Customer__Suppor__36B12243

        /// <summary>
        /// Child Employees where [Employee].[ReportsTo] point to this entity (FK__Employee__Report__37A5467C)
        /// </summary>
        public virtual ICollection<Employee> Employees { get; set; } // Employee.FK__Employee__Report__37A5467C

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [Employee].([ReportsTo]) (FK__Employee__Report__37A5467C)
        /// </summary>
        public virtual Employee Employee_ReportsTo { get; set; } // FK__Employee__Report__37A5467C

        public Employee()
        {
            Customers = new List<Customer>();
            Employees = new List<Employee>();
        }
    }

    // Genre
    public class Genre
    {
        public int GenreId { get; set; } // GenreId (Primary key)
        public string Name { get; set; } // Name (length: 120)

        // Reverse navigation

        /// <summary>
        /// Child Tracks where [Track].[GenreId] point to this entity (FK__Track__GenreId__33D4B598)
        /// </summary>
        public virtual ICollection<Track> Tracks { get; set; } // Track.FK__Track__GenreId__33D4B598

        public Genre()
        {
            Tracks = new List<Track>();
        }
    }

    // Invoice
    public class Invoice
    {
        public int InvoiceId { get; set; } // InvoiceId (Primary key)
        public int CustomerId { get; set; } // CustomerId
        public DateTime? InvoiceDate { get; set; } // InvoiceDate
        public string BillingAddress { get; set; } // BillingAddress (length: 70)
        public string BillingCity { get; set; } // BillingCity (length: 40)
        public string BillingState { get; set; } // BillingState (length: 40)
        public string BillingCountry { get; set; } // BillingCountry (length: 40)
        public string BillingPostalCode { get; set; } // BillingPostalCode (length: 10)
        public decimal Total { get; set; } // Total

        // Reverse navigation

        /// <summary>
        /// Child InvoiceLines where [InvoiceLine].[InvoiceId] point to this entity (FK__InvoiceLi__Invoi__398D8EEE)
        /// </summary>
        public virtual ICollection<InvoiceLine> InvoiceLines { get; set; } // InvoiceLine.FK__InvoiceLi__Invoi__398D8EEE

        // Foreign keys

        /// <summary>
        /// Parent Customer pointed by [Invoice].([CustomerId]) (FK__Invoice__Custome__38996AB5)
        /// </summary>
        public virtual Customer Customer { get; set; } // FK__Invoice__Custome__38996AB5

        public Invoice()
        {
            InvoiceLines = new List<InvoiceLine>();
        }
    }

    // InvoiceLine
    public class InvoiceLine
    {
        public int InvoiceLineId { get; set; } // InvoiceLineId (Primary key)
        public int InvoiceId { get; set; } // InvoiceId
        public int TrackId { get; set; } // TrackId
        public decimal UnitPrice { get; set; } // UnitPrice
        public int Quantity { get; set; } // Quantity

        // Foreign keys

        /// <summary>
        /// Parent Invoice pointed by [InvoiceLine].([InvoiceId]) (FK__InvoiceLi__Invoi__398D8EEE)
        /// </summary>
        public virtual Invoice Invoice { get; set; } // FK__InvoiceLi__Invoi__398D8EEE

        /// <summary>
        /// Parent Track pointed by [InvoiceLine].([TrackId]) (FK__InvoiceLi__Track__3A81B327)
        /// </summary>
        public virtual Track Track { get; set; } // FK__InvoiceLi__Track__3A81B327
    }

    // MediaType
    public class MediaType
    {
        public int MediaTypeId { get; set; } // MediaTypeId (Primary key)
        public string Name { get; set; } // Name (length: 120)

        // Reverse navigation

        /// <summary>
        /// Child Tracks where [Track].[MediaTypeId] point to this entity (FK__Track__MediaType__3E52440B)
        /// </summary>
        public virtual ICollection<Track> Tracks { get; set; } // Track.FK__Track__MediaType__3E52440B

        public MediaType()
        {
            Tracks = new List<Track>();
        }
    }

    // Playlist
    public class Playlist
    {
        public int PlaylistId { get; set; } // PlaylistId (Primary key)
        public string Name { get; set; } // Name (length: 120)

        // Reverse navigation

        /// <summary>
        /// Child PlaylistTracks where [PlaylistTrack].[PlaylistId] point to this entity (FK__PlaylistT__Playl__3B75D760)
        /// </summary>
        public virtual ICollection<PlaylistTrack> PlaylistTracks { get; set; } // PlaylistTrack.FK__PlaylistT__Playl__3B75D760

        public Playlist()
        {
            PlaylistTracks = new List<PlaylistTrack>();
        }
    }

    // PlaylistTrack
    public class PlaylistTrack
    {
        public int PlaylistId { get; set; } // PlaylistId (Primary key)
        public int TrackId { get; set; } // TrackId (Primary key)

        // Foreign keys

        /// <summary>
        /// Parent Playlist pointed by [PlaylistTrack].([PlaylistId]) (FK__PlaylistT__Playl__3B75D760)
        /// </summary>
        public virtual Playlist Playlist { get; set; } // FK__PlaylistT__Playl__3B75D760

        /// <summary>
        /// Parent Track pointed by [PlaylistTrack].([TrackId]) (FK__PlaylistT__Track__3C69FB99)
        /// </summary>
        public virtual Track Track { get; set; } // FK__PlaylistT__Track__3C69FB99
    }

    // Track
    public class Track
    {
        public int TrackId { get; set; } // TrackId (Primary key)
        public string Name { get; set; } // Name (length: 200)
        public int? AlbumId { get; set; } // AlbumId
        public int? MediaTypeId { get; set; } // MediaTypeId
        public int? GenreId { get; set; } // GenreId
        public string Composer { get; set; } // Composer (length: 220)
        public int Milliseconds { get; set; } // Milliseconds
        public int? Bytes { get; set; } // Bytes
        public decimal UnitPrice { get; set; } // UnitPrice

        // Reverse navigation

        /// <summary>
        /// Child InvoiceLines where [InvoiceLine].[TrackId] point to this entity (FK__InvoiceLi__Track__3A81B327)
        /// </summary>
        public virtual ICollection<InvoiceLine> InvoiceLines { get; set; } // InvoiceLine.FK__InvoiceLi__Track__3A81B327

        /// <summary>
        /// Child PlaylistTracks where [PlaylistTrack].[TrackId] point to this entity (FK__PlaylistT__Track__3C69FB99)
        /// </summary>
        public virtual ICollection<PlaylistTrack> PlaylistTracks { get; set; } // PlaylistTrack.FK__PlaylistT__Track__3C69FB99

        // Foreign keys

        /// <summary>
        /// Parent Genre pointed by [Track].([GenreId]) (FK__Track__GenreId__33D4B598)
        /// </summary>
        public virtual Genre Genre { get; set; } // FK__Track__GenreId__33D4B598

        /// <summary>
        /// Parent Album pointed by [Track].([AlbumId]) (FK__Track__AlbumId__3D5E1FD2)
        /// </summary>
        public virtual Album Album { get; set; } // FK__Track__AlbumId__3D5E1FD2

        /// <summary>
        /// Parent MediaType pointed by [Track].([MediaTypeId]) (FK__Track__MediaType__3E52440B)
        /// </summary>
        public virtual MediaType MediaType { get; set; } // FK__Track__MediaType__3E52440B

        public Track()
        {
            InvoiceLines = new List<InvoiceLine>();
            PlaylistTracks = new List<PlaylistTrack>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Album
    public class AlbumConfiguration : IEntityTypeConfiguration<Album>
    {
        public void Configure(EntityTypeBuilder<Album> builder)
        {
            builder.ToTable("Album", "dbo");
            builder.HasKey(x => x.AlbumId).HasName("PK_Album").IsClustered();

            builder.Property(x => x.AlbumId).HasColumnName(@"AlbumId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(160)").IsRequired().HasMaxLength(160);
            builder.Property(x => x.ArtistId).HasColumnName(@"ArtistId").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Artist).WithMany(b => b.Albums).HasForeignKey(c => c.ArtistId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Album__ArtistId__2A4B4B5E");

            builder.HasIndex(x => x.ArtistId).HasDatabaseName("IFK_AlbumArtistId");
            builder.HasIndex(x => x.AlbumId).HasDatabaseName("IPK_Album").IsUnique();
        }
    }

    // Artist
    public class ArtistConfiguration : IEntityTypeConfiguration<Artist>
    {
        public void Configure(EntityTypeBuilder<Artist> builder)
        {
            builder.ToTable("Artist", "dbo");
            builder.HasKey(x => x.ArtistId).HasName("PK_Artist").IsClustered();

//            builder.Property(x => x.ArtistId).HasColumnName(@"ArtistId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.ArtistId).HasColumnName(@"ArtistId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);

            builder.HasIndex(x => x.ArtistId).HasDatabaseName("IPK_Artist").IsUnique();
        }
    }

    // Customer
    public class CustomerConfiguration : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.ToTable("Customer", "dbo");
            builder.HasKey(x => x.CustomerId).HasName("PK_Customer").IsClustered();

            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(40)").IsRequired().HasMaxLength(40);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Company).HasColumnName(@"Company").HasColumnType("nvarchar(80)").IsRequired(false).HasMaxLength(80);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(24)").IsRequired(false).HasMaxLength(24);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("nvarchar(24)").IsRequired(false).HasMaxLength(24);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(60)").IsRequired().HasMaxLength(60);
            builder.Property(x => x.SupportRepId).HasColumnName(@"SupportRepId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Employee).WithMany(b => b.Customers).HasForeignKey(c => c.SupportRepId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Customer__Suppor__36B12243");

            builder.HasIndex(x => x.SupportRepId).HasDatabaseName("IFK_CustomerSupportRepId");
            builder.HasIndex(x => x.CustomerId).HasDatabaseName("IPK_Customer").IsUnique();
        }
    }

    // Employee
    public class EmployeeConfiguration : IEntityTypeConfiguration<Employee>
    {
        public void Configure(EntityTypeBuilder<Employee> builder)
        {
            builder.ToTable("Employee", "dbo");
            builder.HasKey(x => x.EmployeeId).HasName("PK_Employee").IsClustered();

            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(30)").IsRequired(false).HasMaxLength(30);
            builder.Property(x => x.ReportsTo).HasColumnName(@"ReportsTo").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.BirthDate).HasColumnName(@"BirthDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.HireDate).HasColumnName(@"HireDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.State).HasColumnName(@"State").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.Country).HasColumnName(@"Country").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar(24)").IsRequired(false).HasMaxLength(24);
            builder.Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("nvarchar(24)").IsRequired(false).HasMaxLength(24);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(60)").IsRequired(false).HasMaxLength(60);

            // Foreign keys
            builder.HasOne(a => a.Employee_ReportsTo).WithMany(b => b.Employees).HasForeignKey(c => c.ReportsTo).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Employee__Report__37A5467C");

            builder.HasIndex(x => x.ReportsTo).HasDatabaseName("IFK_EmployeeReportsTo");
            builder.HasIndex(x => x.EmployeeId).HasDatabaseName("IPK_Employee").IsUnique();
        }
    }

    // Genre
    public class GenreConfiguration : IEntityTypeConfiguration<Genre>
    {
        public void Configure(EntityTypeBuilder<Genre> builder)
        {
            builder.ToTable("Genre", "dbo");
            builder.HasKey(x => x.GenreId).HasName("PK_Genre").IsClustered();

            builder.Property(x => x.GenreId).HasColumnName(@"GenreId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);

            builder.HasIndex(x => x.GenreId).HasDatabaseName("IPK_Genre").IsUnique();
        }
    }

    // Invoice
    public class InvoiceConfiguration : IEntityTypeConfiguration<Invoice>
    {
        public void Configure(EntityTypeBuilder<Invoice> builder)
        {
            builder.ToTable("Invoice", "dbo");
            builder.HasKey(x => x.InvoiceId).HasName("PK_Invoice").IsClustered();

            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.CustomerId).HasColumnName(@"CustomerId").HasColumnType("int").IsRequired();
            builder.Property(x => x.InvoiceDate).HasColumnName(@"InvoiceDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.BillingAddress).HasColumnName(@"BillingAddress").HasColumnType("nvarchar(70)").IsRequired(false).HasMaxLength(70);
            builder.Property(x => x.BillingCity).HasColumnName(@"BillingCity").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.BillingState).HasColumnName(@"BillingState").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.BillingCountry).HasColumnName(@"BillingCountry").HasColumnType("nvarchar(40)").IsRequired(false).HasMaxLength(40);
            builder.Property(x => x.BillingPostalCode).HasColumnName(@"BillingPostalCode").HasColumnType("nvarchar(10)").IsRequired(false).HasMaxLength(10);
            builder.Property(x => x.Total).HasColumnName(@"Total").HasColumnType("numeric(10,2)").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Customer).WithMany(b => b.Invoices).HasForeignKey(c => c.CustomerId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Invoice__Custome__38996AB5");

            builder.HasIndex(x => x.CustomerId).HasDatabaseName("IFK_InvoiceCustomerId");
            builder.HasIndex(x => x.InvoiceId).HasDatabaseName("IPK_Invoice").IsUnique();
        }
    }

    // InvoiceLine
    public class InvoiceLineConfiguration : IEntityTypeConfiguration<InvoiceLine>
    {
        public void Configure(EntityTypeBuilder<InvoiceLine> builder)
        {
            builder.ToTable("InvoiceLine", "dbo");
            builder.HasKey(x => x.InvoiceLineId).HasName("PK_InvoiceLine").IsClustered();

            builder.Property(x => x.InvoiceLineId).HasColumnName(@"InvoiceLineId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.InvoiceId).HasColumnName(@"InvoiceId").HasColumnType("int").IsRequired();
            builder.Property(x => x.TrackId).HasColumnName(@"TrackId").HasColumnType("int").IsRequired();
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("numeric(10,2)").IsRequired();
            builder.Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Invoice).WithMany(b => b.InvoiceLines).HasForeignKey(c => c.InvoiceId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__InvoiceLi__Invoi__398D8EEE");
            builder.HasOne(a => a.Track).WithMany(b => b.InvoiceLines).HasForeignKey(c => c.TrackId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__InvoiceLi__Track__3A81B327");

            builder.HasIndex(x => x.InvoiceId).HasDatabaseName("IFK_InvoiceLineInvoiceId");
            builder.HasIndex(x => x.TrackId).HasDatabaseName("IFK_InvoiceLineTrackId");
            builder.HasIndex(x => x.InvoiceLineId).HasDatabaseName("IPK_InvoiceLine").IsUnique();
        }
    }

    // MediaType
    public class MediaTypeConfiguration : IEntityTypeConfiguration<MediaType>
    {
        public void Configure(EntityTypeBuilder<MediaType> builder)
        {
            builder.ToTable("MediaType", "dbo");
            builder.HasKey(x => x.MediaTypeId).HasName("PK_MediaType").IsClustered();

            builder.Property(x => x.MediaTypeId).HasColumnName(@"MediaTypeId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);

            builder.HasIndex(x => x.MediaTypeId).HasDatabaseName("IPK_MediaType").IsUnique();
        }
    }

    // Playlist
    public class PlaylistConfiguration : IEntityTypeConfiguration<Playlist>
    {
        public void Configure(EntityTypeBuilder<Playlist> builder)
        {
            builder.ToTable("Playlist", "dbo");
            builder.HasKey(x => x.PlaylistId).HasName("PK_Playlist").IsClustered();

            builder.Property(x => x.PlaylistId).HasColumnName(@"PlaylistId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(120)").IsRequired(false).HasMaxLength(120);

            builder.HasIndex(x => x.PlaylistId).HasDatabaseName("IPK_Playlist").IsUnique();
        }
    }

    // PlaylistTrack
    public class PlaylistTrackConfiguration : IEntityTypeConfiguration<PlaylistTrack>
    {
        public void Configure(EntityTypeBuilder<PlaylistTrack> builder)
        {
            builder.ToTable("PlaylistTrack", "dbo");
            builder.HasKey(x => new { x.PlaylistId, x.TrackId }).HasName("PK_PlaylistTrack").IsClustered();

            builder.Property(x => x.PlaylistId).HasColumnName(@"PlaylistId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.TrackId).HasColumnName(@"TrackId").HasColumnType("int").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Playlist).WithMany(b => b.PlaylistTracks).HasForeignKey(c => c.PlaylistId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlaylistT__Playl__3B75D760");
            builder.HasOne(a => a.Track).WithMany(b => b.PlaylistTracks).HasForeignKey(c => c.TrackId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlaylistT__Track__3C69FB99");

            builder.HasIndex(x => x.TrackId).HasDatabaseName("IFK_PlaylistTrackTrackId");
            builder.HasIndex(x => new { x.PlaylistId, x.TrackId }).HasDatabaseName("IPK_PlaylistTrack").IsUnique();
        }
    }

    // Track
    public class TrackConfiguration : IEntityTypeConfiguration<Track>
    {
        public void Configure(EntityTypeBuilder<Track> builder)
        {
            builder.ToTable("Track", "dbo");
            builder.HasKey(x => x.TrackId).HasName("PK_Track").IsClustered();

            builder.Property(x => x.TrackId).HasColumnName(@"TrackId").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.AlbumId).HasColumnName(@"AlbumId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.MediaTypeId).HasColumnName(@"MediaTypeId").HasColumnType("int").IsRequired();
            builder.Property(x => x.GenreId).HasColumnName(@"GenreId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Composer).HasColumnName(@"Composer").HasColumnType("nvarchar(220)").IsRequired(false).HasMaxLength(220);
            builder.Property(x => x.Milliseconds).HasColumnName(@"Milliseconds").HasColumnType("int").IsRequired();
            builder.Property(x => x.Bytes).HasColumnName(@"Bytes").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("numeric(10,2)").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Album).WithMany(b => b.Tracks).HasForeignKey(c => c.AlbumId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Track__AlbumId__3D5E1FD2");
            builder.HasOne(a => a.MediaType).WithMany(b => b.Tracks).HasForeignKey(c => c.MediaTypeId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Track__MediaType__3E52440B");

            builder.HasIndex(x => x.AlbumId).HasDatabaseName("IFK_TrackAlbumId");
            builder.HasIndex(x => x.GenreId).HasDatabaseName("IFK_TrackGenreId");
            builder.HasIndex(x => x.MediaTypeId).HasDatabaseName("IFK_TrackMediaTypeId");
            builder.HasIndex(x => x.TrackId).HasDatabaseName("IPK_Track").IsUnique();
        }
    }


    #endregion

}
// </auto-generated>
