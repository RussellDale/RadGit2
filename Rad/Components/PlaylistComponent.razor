@page "/playlistcomponent"

@using GridBlazor
@using GridBlazor.Pages
@using GridMvc.Demo.Resources
@using GridShared
@using GridShared.Columns
@using GridShared.Utility
@using System
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@using System.Timers
@using Rad.Models.Domian
@using Rad.Services
@using Rad.Dialogs


@inject IPlaylistService        playlistService
@inject IPlaylistTrackService   playlistTrackService
@inject IPrintingService        printingService

@if (_task.IsCompleted)
{
    <div class="font-italic small">
        <div class="col-sm-12 table-sm">
            <GridComponent T="Playlist" Grid="@_grid"></GridComponent>
        </div>
    </div>
    <button @onclick="Print">Print</button>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    Timer timer;
    private CGrid<Playlist> _grid;
    private GridComponent<Playlist> _gridComponent;
    private Task _task;
    //    private GridComponent<Playlist> component;

    private void Print()
    {
        string err = "You must select the row you want to print";

        if (playlist.PlaylistId == 0)
        {

        }
        else
        {
            string head = "<head><style>table {width: 100%;} th {text-align: left;}</style></head>";

            List<PlaylistTrack> playlistTrack = (List<PlaylistTrack>)playlist.PlaylistTracks;
/*
            string invoiceDate = string.Format("{0:d}", invoice.InvoiceDate);
            string invoiceTotal = string.Format("{0,0:C}", invoice.Total);

            string rawHtml1 = string.Join(
              Environment.NewLine,
              head,
              "<h1>Invoice - " + invoiceDate + "</h1>",
              "<h1>Total: " + invoiceTotal + "</h1>",
              invoice.Customer.FirstName + " " + invoice.Customer.LastName + " (" + invoice.Customer.Email + ")",
              "<table><tr><td><h4>Bill To:</h4></td><td>" + invoice.Customer.Address + " </br> ",
              invoice.Customer.City + " " + invoice.Customer.State + ", " + invoice.Customer.Country + " " + invoice.Customer.PostalCode + "</td>",
              "<td><h4>Ship To:</h4></td><td>" + invoice.BillingAddress + "</br>",
              invoice.BillingCity + " " + invoice.BillingState + ", " + invoice.BillingCountry + " " + invoice.BillingPostalCode + "</td></tr></table>",
              "<table><tr><th>Track (Album - Artist)</th><th>Unit</br>Price</th><th>Quantity</th><th>Total</th></tr>");

            string rawHtml2 = null;

            foreach (var invoiceLine in invoiceLines)
            {
                rawHtml2 = rawHtml2 +
                "<tr><td>" +
                invoiceLine.Track.Name + " (" +
                invoiceLine.Track.Album.Title + " - " +
                invoiceLine.Track.Album.Artist.Name + ")</td><td>" +
                invoiceLine.UnitPrice + "</td><td>" +
                invoiceLine.Quantity + "</td><td>" +
                invoiceLine.UnitPrice * invoiceLine.Quantity + "</td>" +
                "</tr>";
            }

            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td>----------</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td>Total</td><td>" + invoiceTotal + "</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td>======</td></tr>";
            rawHtml2 = rawHtml2 + "</table>";

            string rawHtml = String.Join(
              Environment.NewLine,
              rawHtml1,
              rawHtml2
            );

            printingService.Print(rawHtml, PrintType.RawHtml);
*/
        }
    }



    protected override async Task OnParametersSetAsync()
    {
        Action<IGridColumnCollection<Playlist>> playlistColumns = c =>
        {
            c.Add(o => o.PlaylistId, true).SetPrimaryKey(true).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.Name, false);
        };

        Action<IGridColumnCollection<PlaylistTrack>> playlistTrackColumns = c =>
        {
            c.Add(o => o.PlaylistId, true).SetPrimaryKey(true).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.TrackId, true).SetPrimaryKey(true, false);
            //c.Add(o => o.Track.TrackId, false).SetCrudHidden(true);
            c.Add(o => o.Track.Name, false).SetCrudHidden(true);
            c.Add(o => o.Track.Genre.Name, false).SetCrudHidden(true);
            //c.Add(o => o.Track.MediaType.Name, false);
            c.Add(o => o.Track.Album.Artist.Name, false).SetCrudHidden(true);
            c.Add(o => o.Track.Album.Title, false).SetCrudHidden(true);
        };

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;
        var query = new QueryDictionary<StringValues>();

        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
            int playlistId = Int32.Parse(keys[0].ToString());
            var subGridClient = new GridClient<PlaylistTrack>(q => playlistTrackService.GetPlaylistTrackGridRows(playlistTrackColumns, query, playlistId),
                query, false, "playlistGrid" + playlistId, playlistTrackColumns, locale)
                .Sortable()
                .Filterable()
                .SetKeyboard(true)
                .Groupable(true)
                .ClearFiltersButton(true)
                .SetStriped(true)
                .WithMultipleFilters()
                .Searchable(true, false)
                .WithGridItemsCount()
                .ChangePageSize(true)
                .Selectable(true)
                .SetHeaderCrudButtons(true)
                .Crud(true, false, false, true, playlistTrackService)
                .AddButtonComponent<DialogComponentArtist>("Artist N", "Artist L", null, null, null, playlistId)
                .SetStriped(true)
            ;

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        var client = new GridClient<Playlist>(q => playlistService.GetPlaylistGridRows(playlistColumns, query), query, false,
            "playlistGrid", playlistColumns, locale)
            .Selectable(true)
            .Searchable(true, false)
            .Crud(true, false, false, true, playlistService)
            .SetHeaderCrudButtons(true)
            .SubGrid(subGrids, ("PlaylistId", "PlaylistId"))
            .SetStriped(true)
        ;

        _grid = client.Grid;
        _gridComponent = _grid.GridComponent;
        _task = client.UpdateGrid();
        await _task;
        Start();
    }

    public void Start()
    {
        if (timer == null)
        {
            timer = new Timer();
            timer.Interval = 500;
            timer.Elapsed += TimerOnElapsed;
        }

        timer.Start();
    }

    Playlist playlist = new Playlist();

    protected void OnRowClickedPlaylist(object item)
    {
        if (item.GetType() == typeof(Playlist))
        {
            playlist = (Playlist)item;
        }
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();

            _gridComponent.OnRowClicked = OnRowClickedPlaylist;
        }
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }
}

