@page "/customercomponent"

@using GridMvc.Demo.Resources
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using System
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@using System.Timers
@using Rad.Models.Domian
@using Rad.Services

@inject ICustomerService customerService
@inject IEmployeeService employeeService
@inject IPrintingService printingService

@if (_task.IsCompleted)
{
    <div class="font-italic small">
        <div class="col-sm-12 table-sm">
            <GridComponent T="Customer" Grid="@_grid"></GridComponent>
        </div>
    </div>
    <button @onclick="Print">Print</button>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{
    private CGrid<Customer> _grid;
    private Task _task;
    Timer timer;
    private GridComponent<Customer> _gridComponent;

    private void Print()
    {
        string err = "You must select the row you want to print";

        if (customer.CustomerId == 0)
        {

        }
        else
        {
            string rawHtml = string.Join(
              Environment.NewLine,
              "<h1>Customer</h1>" + 
              "<h2>" + customer.FirstName + " " + customer.LastName + " (" + customer.Email + ")</h2>" +
              customer.Company + "</br></br>" +
              customer.Address + "</br>" +
              customer.City + " " + customer.State + ", " + customer.Country + " " + customer.PostalCode + "</br></br>" +
              "Phone: " + customer.Phone + "</br>" + 
              "Fax: " + customer.Fax);

            printingService.Print(rawHtml, PrintType.RawHtml);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Action<IGridColumnCollection<Customer>> customerColumns = c =>
        {
            c.Add(o => o.CustomerId, true).SetPrimaryKey(true).Titled(SharedResource.Number).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.FirstName, false);
            c.Add(o => o.LastName, false);
            c.Add(o => o.Email, false);
            c.Add(o => o.Company, false);
            c.Add(o => o.Address, false);
            c.Add(o => o.City, false);
            c.Add(o => o.State, false);
            c.Add(o => o.Country, false);
            c.Add(o => o.PostalCode, false);
            c.Add(o => o.Phone, false);
            c.Add(o => o.Fax, false);
           
            c.Add(o => o.SupportRepId, false)
                   .SetWidth(250).RenderValueAs(o => o.SupportRepId == null ? "" : o.Employee.FirstName + " " + o.Employee.LastName)
                   .SetSelectField(true, o => o.SupportRepId == null ? "" : o.Employee.EmployeeId.ToString() + " - " + 
                                   o.Employee.FirstName + " " + o.Employee.LastName,
                                   employeeService.GetAllEmployee)
                   .SetListFilter(employeeService.GetAllEmployee(), true, true)
;
        };

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;
        var query = new QueryDictionary<StringValues>();

        var client = new GridClient<Customer>(q => customerService.GetCustomerGridRow(customerColumns, query), query, false,
                                              "customerGrid", customerColumns, locale)
            .Sortable()
            .Filterable()
            .SetKeyboard(true)
            .Groupable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .Searchable(true, false)
            .WithGridItemsCount()
            .ChangePageSize(true)
            .Selectable(true)
            .Crud(true, true, true, true, customerService)
            .SetHeaderCrudButtons(true)
            .SetStriped(true)
            ;

        _grid = client.Grid;
        _gridComponent = _grid.GridComponent;
        _task = client.UpdateGrid();
        await _task;

        Start();
    }

    public void Start()
    {
        if (timer == null)
        {
            timer = new Timer();
            timer.Interval = 500;
            timer.Elapsed += TimerOnElapsed;
        }

        timer.Start();
    }

    Customer customer = new Customer();

    protected void OnRowClickedCustomer(object item)
    {
        if (item.GetType() == typeof(Customer))
        {
            customer = (Customer)item;
        }
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        if (timer != null && _gridComponent != null)
        {
            timer.Stop();
            timer.Dispose();

            _gridComponent.OnRowClicked = OnRowClickedCustomer;
        }
        else
            _gridComponent = _grid.GridComponent;
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }
}

