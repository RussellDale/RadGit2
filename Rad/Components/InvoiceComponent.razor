@page "/invoicecomponent"
<!--
@typeparam T
-->
@using GridBlazor.Resources
@using GridMvc.Demo.Resources
@using GridShared.Sorting
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using System
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@using System.Timers
@using Rad.Models.Domian
@using Rad.Pages;
@using Rad.Services
@using Rad.Dialogs
@using Rad.Shared

@inject IArtistService          artistService
@inject IAlbumService           albumService
@inject ITrackService           trackService
@inject IInvoiceService         invoiceService
@inject IInvoiceLineService     invoiceLineService
@inject ICustomerService        customerService
@inject IModalService           modal
@inject IPrintingService        printingService

@if (_task.IsCompleted)
{
    @code {
    EditForm Form;
    protected Boolean isMessage = false;

    protected void closeModal()
    {
        isMessage = false;
        GridItems();
    }

    private void MyClickHandler(MouseEventArgs e)
    {
        var iC = invoiceColumnsA;

        Action<IGridColumnCollection<Invoice>> invoiceColumnsX = c =>
        {
            c.Add(o => o.CustomerId, false)
                  .RenderValueAs(o => o.Customer == null ? "" : o.Customer.Email)
                  .SetSelectField(true, o => o.Customer == null ? "" : o.Customer.CustomerId.ToString() + " - " + o.Customer.Email,
                                  customerService.GetAllCustomer)
                  .SetListFilter(customerService.GetAllCustomer(), true, true)
            ;
        };

        isMessage = true;
    }
}


    @if (isMessage)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="form-group">
                            <form>
                                <EditForm Model="@isMessage" OnValidSubmit="@closeModal" @ref="Form">
                                    <ArtistComponentSearch InvoiceId="@artistComponentSearch.InvoiceId" />
                                </EditForm>
                            </form>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-warning" @onclick="@closeModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @code {
       ArtistComponentSearch artistComponentSearch = new ArtistComponentSearch();
    }

    <div class="font-italic small">
        <div class="col-sm-12 table-sm">
            <GridComponent @ref="_gridComponent" T="Invoice" Grid="@_grid"></GridComponent>
        </div>
    </div>
    <button @onclick="Print">Print</button>
    <button @onclick="Artist">Artist</button>
}
else
{
    <p>
        <em>Loading...</em>
    </p>
}

@code
{
    Timer timer1;
    Timer timer2;
    private CGrid<Invoice> _grid;
    private GridComponent<Invoice> _gridComponent;

    //    private CGrid<InvoiceLine> _gridInvoiceLine;
    //    private GridComponent<InvoiceLine> _gridComponentInvoiceLine;

    private Task _task;

    Action<IGridColumnCollection<Invoice>> invoiceColumnsA;

    private void Artist()
    {
        string err = "You must select the row you want to artist";

        if (invoice.InvoiceId == 0)
        {

        }
        else
        {
            isMessage = true;
        }
    }

    Invoice invoice = new Invoice();

    protected void OnRowClickedInvoice(object item)
    {
        if (item != null)
        {
            if (item.GetType() == typeof(Invoice))
            {
                invoice = (Invoice)item;
                artistComponentSearch.InvoiceId = invoice.InvoiceId;

                GridItems();
            }
        }
    }

    private void GridItems()
    {
        Task<Invoice> invoiceTask = invoiceService.Get(invoice.InvoiceId);
        invoice = (Invoice)invoiceTask.Result;
        List<Invoice> items = (List<Invoice>)_grid.Items;
        items[_gridComponent.SelectedRow] = invoice;
    }

    private void Print()
    {
        string err = "You must select the row you want to print";

        if (invoice.InvoiceId == 0)
        {

        }
        else
        {
            GridItems();
            List<InvoiceLine> invoiceLines = (List<InvoiceLine>)invoice.InvoiceLines;

            string rawHtml2 = null;

            foreach (var invoiceLine in invoiceLines)
            {
                string unitPrice = string.Format("{0,0:C}", invoiceLine.UnitPrice);
                string total = string.Format("{0,0:C}", invoiceLine.UnitPrice * invoiceLine.Quantity);

                rawHtml2 = rawHtml2 +
                "<tr><td scope=\"row\">" +
                invoiceLine.Track.Name + " (" +
                invoiceLine.Track.Album.Title + " - " +
                invoiceLine.Track.Album.Artist.Name + ")</td><td>" +
                unitPrice + "</td><td>" +
                invoiceLine.Quantity + "</td><td>" +
                total + "</td>" +
                "</tr>";
            }

            string invoiceDate = string.Format("{0:d}", invoice.InvoiceDate);
            string invoiceTotal = string.Format("{0,0:C}", invoice.Total);

            string rawHtml1 = string.Join(
              Environment.NewLine,
              "<!doctype html>",
              "<html lang=\"en-US\">",
              "<head>",
                 "<meta charset=\"UTF-8\" />",
                 "<style>table {width: 100%;} td {text-align: right;} td[scope='row'] {text-align: left;}</style>",
              "</head>",
              "<body>",
              "<h1>Invoice: " + invoice.InvoiceId + " - " + invoiceDate + "</h1>",
              "<h1>Total: " + invoiceTotal + "</h1>",
              "<table><tr><td scope=\"row\">" + invoice.Customer.FirstName + " " + invoice.Customer.LastName + " (" + invoice.Customer.Email + ")</td></tr></table>",
              "<table><tr><td scope=\"row\"><strong>Bill To:</strong></td><td scope=\"row\">" + invoice.Customer.Address + " </br> ",
              invoice.Customer.City + " " + invoice.Customer.State + ", " + invoice.Customer.Country + " " + invoice.Customer.PostalCode + "</td>",
              "<td scope=\"row\"><strong>Ship To:</strong></td><td scope=\"row\">" + invoice.BillingAddress + "</br>",
              invoice.BillingCity + " " + invoice.BillingState + ", " + invoice.BillingCountry + " " + invoice.BillingPostalCode + "</td></tr></table>",
              "<table><tr><th>Track (Album - Artist)</th><th>Unit</br>Price</th><th>Quantity</th><th>Total</th></tr>");

            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td>----------</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td>Total</td><td>" + invoiceTotal + "</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td>======</td></tr>";
            rawHtml2 = rawHtml2 + "</table>";

            string rawHtml = String.Join(
              Environment.NewLine,
              rawHtml1,
              rawHtml2,
              "</body></html>"
            );

            invoice = new Invoice();

            printingService.Print(rawHtml, PrintType.RawHtml);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Action<IGridColumnCollection<Invoice>> invoiceColumns = c =>
        {
            c.Add(o => o.InvoiceId, false).SetPrimaryKey(true).Titled(SharedResource.Number).SetWidth(50).SetCrudHidden(true);
            //            c.Add().Encoded(false).Sanitized(false).RenderComponentAs<DialogComponentArtistCell>();
            c.Add(o => o.InvoiceDate, false).Format("{0:yyyy-MM-dd}");
            c.Add(o => o.Total, false).Titled("Total").Format("{0,0:C}").SetCrudHidden(true);
            c.Add().Titled("Billing")
                   .RenderValueAs(o => o.BillingAddress + ", " + o.BillingCity + " " + o.BillingState + ", " +
                                       o.BillingCountry + " " + o.BillingPostalCode)
            ;
            c.Add(o => o.BillingAddress, true);
            c.Add(o => o.BillingCity, true);
            c.Add(o => o.BillingState, true);
            c.Add(o => o.BillingCountry, true);
            c.Add(o => o.BillingPostalCode, true);
            c.Add(o => o.CustomerId, false)
                  .RenderValueAs(o => o.Customer == null ? "" : o.Customer.Email)
                  .SetSelectField(true, o => o.Customer == null ? "" : o.Customer.Email,
                                  customerService.GetAllCustomer)
                  .SetListFilter(customerService.GetAllCustomer(), true, true)
            ;
            c.Add(o => o.InvoiceLines.Count, false).SetCrudHidden(true);
        };

        Func<object[], bool, bool, bool, bool, Task<IGrid>> subGrids2 = async (keys, create, read, update, delete) =>
        {
            /*
            int invoiceId = Int32.Parse(keys[0].ToString());

            var subGridClient = new GridClient<InvoiceLine>(q => invoiceLineService.GetInvoiceLineId(invoiceLineColumns, query, invoiceId),
                query, false, "invoiceLineGrid" + invoiceId, invoiceLineColumns, locale)
                .WithGridItemsCount()
                .Selectable(true)
                .SetHeaderCrudButtons(true)
                .Crud(true, false, true, true, invoiceLineService)
                //                .SetEditAfterInsert(true)
            //                .SetUpdateComponent<Invoice>()
            ;

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
            */
            return null;

        };

        Action<IGridColumnCollection<InvoiceLine>> invoiceLineColumns = c =>
        {
            c.Add(o => o.InvoiceLineId, true).SetPrimaryKey(true).SetWidth(500).SetCrudHidden(true);
            c.Add(o => o.TrackId, true);
            c.Add(false).Titled("Track")
                   .RenderValueAs(o => o.Track.Name + " (" + o.Track.Album.Title + " - " +
                                       o.Track.Album.Artist.Name + ")" )
            ;
            c.Add(o => o.Quantity, false);
            c.Add(o => o.UnitPrice, true).Titled("Price");
            c.Add().Titled("Price").RenderValueAs(o => "$" + o.UnitPrice).SetCrudHidden(true);
            c.Add().Titled("Total")
               .RenderValueAs(o => "$" + (o.Quantity * o.UnitPrice).ToString()).SetCrudHidden(true);//.Format("{0:C}");
            c.Add(o => o.Track.Genre.Name, false).SetCrudHidden(true);
            c.Add(o => o.Track.MediaType.Name, false).SetCrudHidden(true);
            c.Add(o => o.Track.UnitPrice, false).SetCrudHidden(true).Format("{0:C}");
        };

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;
        var query = new QueryDictionary<StringValues>();

        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
            int invoiceId = Int32.Parse(keys[0].ToString());
            //            MarkupString invoiceId_MS = new MarkupString("" + invoiceId);
            //            IList<Action> invoiceId_IL_A = new IList(Action(invoiceId_IL_A));
            //            Action invoiceId_A = new Action(invoiceId);

            DialogComponentArtist test = new DialogComponentArtist();

            test.invoiceId = invoiceId;

            object invoiceIdObj = invoiceId;

            var subGridClient = new GridClient<InvoiceLine>(q => invoiceLineService.GetInvoiceLineId(invoiceLineColumns, query, invoiceId),
                query, false, "invoiceLineGrid" + invoiceId, invoiceLineColumns, locale)
                .WithGridItemsCount()
                .Selectable(true)
                .SetHeaderCrudButtons(true)
                .Crud(true, false, true, true, invoiceLineService)
                .SetStriped(true)
                //                .AddButtonComponent<DialogComponentArtist>("Artist N", "Artist L", null, null, null, invoiceIdObj)
                .RearrangeableColumns()
                .AddToOnAfterRender(OnAfterInvoiceLineRender)
                ;
            //                .AddToOnAfterRender(OnAfterInvoiceLineRender)
            //                .AddButtonCrudComponent<InvoiceLine>("HI","Hi",false,false,true,false)
            //                            .SetEditAfterInsert(true)
            //                            .SetUpdateComponent<Invoice>(

            //_gridInvoiceLine = subGridClient.Grid;
            //_gridComponentInvoiceLine = _gridInvoiceLine.GridComponent;
            //            _gridComponentInvoiceLine.BeforeUpdateChangeValue += BeforeUpdateChangeValueInvoiceLine;

            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        var client = new GridClient<Invoice>(q => invoiceService.GetInvoiceGridRows(invoiceColumns, query), query, false,
            "invoicesGrid", invoiceColumns, locale)
            .Sortable()
            .Filterable()
            .SetKeyboard(true)
            .Groupable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .Searchable(true, false)
            .WithGridItemsCount()
            .ChangePageSize(true)
            .Searchable()
            .Selectable(true)
            .SetHeaderCrudButtons(true)
            .RearrangeableColumns()
            .Crud(true, false, true, true, invoiceService)
            .SubGrid(subGrids, ("InvoiceId", "InvoiceId"))
            .SetStriped(true)
            //        .SubGrid(subGrids2, ("CustomerId", "CustomerId"))
            ;



        _grid = client.Grid;

        //        client.SetUpdateComponent<GridComponent<Invoice>>();

        //        client.SetUpdateComponent<GridUpdateComponent<Invoice>>();
        //client.SetUpdateComponent<GridDialogComponent<Invoice>>();

        //        IList<Action<object>> actions,
        //                    IList< Func<object, Task> > functions, object obj



        _gridComponent = _grid.GridComponent;
        _task = client.UpdateGrid();

        //        await _gridComponent.UpdateItem(GridUpdateComponent<Invoice> );

        //client.Crud(true, false, true, true, invoiceService);

        await _task;

        invoiceColumnsA = invoiceColumns;

        Start1();
    }

    private async Task OnAfterInvoiceLineRender(GridComponent<InvoiceLine> gridComponent, bool firstRender)
    {
        if (firstRender)
        {
            gridComponent.AfterInsert += AfterInsertInvoiceLine;
            gridComponent.AfterUpdate += AfterUpdateInvoiceLine;
            gridComponent.AfterDelete += AfterDeleteInvoiceLine;

            await Task.CompletedTask;
        }
    }

    private async Task<bool> AfterInsertInvoiceLine(GridCreateComponent<InvoiceLine> component, InvoiceLine item)
    {
        OnRowClickedInvoice(invoice);
        return true;
    }

    private async Task<bool> AfterUpdateInvoiceLine(GridUpdateComponent<InvoiceLine> component, InvoiceLine item)
    {
        OnRowClickedInvoice(invoice);
        return true;
    }
    private async Task<bool> AfterDeleteInvoiceLine(GridDeleteComponent<InvoiceLine> component, InvoiceLine item)
    {
        //Start2();
        //GridItems();
        OnRowClickedInvoice(invoice);
        return true;
    }

    public void Start1()
    {
        if (timer1 == null)
        {
            timer1 = new Timer();
            timer1.Interval = 500;
            timer1.Elapsed += Timer1OnElapsed;
        }

        timer1.Start();
    }

    private void Timer1OnElapsed(object sender, ElapsedEventArgs e)
    {
        if (timer1 != null && _gridComponent != null)
        {
            timer1.Stop();
            timer1.Dispose();

            _gridComponent.OnRowClicked = OnRowClickedInvoice;
        }
        else
            _gridComponent = _grid.GridComponent;
    }

    public void Dispose1()
    {
        if (timer1 != null)
        {
            timer1.Dispose();
            timer1 = null;
        }
    }

    public void Start2()
    {
        if (timer2 == null)
        {
            timer2 = new Timer();
            timer2.Interval = 2000;
            timer2.Elapsed += Timer2OnElapsed;
        }

        timer2.Start();
    }

    private void Timer2OnElapsed(object sender, ElapsedEventArgs e)
    {
        if (timer2 != null)
        {
            timer2.Stop();
            timer2.Dispose();

            GridItems();
        }
    }

    public void Dispose2()
    {
        if (timer2 != null)
        {
            timer2.Dispose();
            timer2 = null;
        }
    }
/*
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _gridComponent.BeforeUpdateForm += BeforeUpdateForm;
            //            _gridComponent.BeforeCreateForm += BeforeCreateForm;
            //            _gridComponent.AfterCreateForm += AfterCreateForm;
            //            _gridComponent.BeforeBack += BeforeBack;
            _gridComponent.BeforeUpdate += BeforeUpdate;

            //            _gridComponent.BeforeUpdateChangeValue += BeforeUpdateChangeValue;

            //            _gridComponent.BeforeUpdateChangeValue += BeforeUpdateChangeValueInvoiceLine;



        }
    }

    //    private async Task BeforeUpdateChangeValue(GridUpdateComponent<Invoice> component, Invoice item)
    private async Task BeforeUpdateChangeValue(GridComponent<Invoice> component, Invoice item)
    {

    }

    private async Task BeforeUpdateChangeValueInvoiceLine(GridComponent<InvoiceLine> component, InvoiceLine item)
    {

    }

    private async Task<bool> BeforeBack(GridUpdateComponent<Invoice> component, Invoice item)
    {
        return true;
    }


    private async Task<bool> BeforeUpdate(GridUpdateComponent<Invoice> component, Invoice item)
    {
        //        var orderValidator = new InvoiceValidator();
        //        var valid = await orderValidator.ValidateAsync(item);

        bool valid = false;

        //       if (!valid.IsValid)
        {
            //            component.Error = "Update operation returned one or more errors";
            //            foreach (var error in valid.Errors)
            //            {
            //                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            //            }
        }

        //        return valid.IsValid;
        return valid;
    }

    private async Task<bool> BeforeUpdateForm(GridComponent<Invoice> component, Invoice item)
    {
        //        object[] keys = component.Keys;

        IGridColumnCollection col = component.Grid.Columns;

        return true;
    }


    private async Task OnAfterInvoiceLineRender(GridComponent<InvoiceLine> gridComponent, bool firstRender)
    {
        if (firstRender)
        {
            //            gridComponent.BeforeUpdateChangeValue += BeforeUpdateChangeValueInvoiceLine;

            await Task.CompletedTask;
        }
    }

    private async Task<bool> BeforeUpdateInvoiceLine(GridUpdateComponent<InvoiceLine> component, InvoiceLine item)
    {
        //            var invoiceLineValidator = new InvoiceLineValidator();
        //            var valid = await invoiceLineValidator.ValidateAsync(item);

        bool valid = false;

        //        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            //            foreach (var error in valid.Errors)
            //            {
            //                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            //            }
        }

        //        return valid.IsValid;


        return valid;
    }
*/
}

