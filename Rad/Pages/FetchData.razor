@page "/fetchdata"

@using Rad.Data
@inject WeatherForecastService ForecastService
@inject IPrintingService PrintingService

<!-- -->
@if (Param != "")
{
    <h1>@Param</h1>
}
<h1>Weather Forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
  <div id="PrintDiv">
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
  </div>
    <button type="button" @onclick="@(() => PrintingService.Print("docs/sample.pdf"))">
        Print PDF
    </button>

    <form id="printable-form">
        <div class="form-group">
            <label for="exampleInputEmail1">Email address</label>
            <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">Password</label>
            <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="exampleCheck1">
            <label class="form-check-label text-primary" for="exampleCheck1">Check me out</label>
        </div>
    </form>

    <button @onclick="@(_ => PrintingService.Print("printable-form", PrintType.Html))">
        Print Form
    </button>

            string rawHtml = String.Join(
                Environment.NewLine,
                "<h1>Print.js Raw HTML Print Test</h1>",
                "<p style=\"color: blue;\">Lorem ipsum dolor sit amet, consectetur adipiscing elit,</p>",
                "<p>sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>");
        
        <button @onclick="@(_ => PrintingService.Print(rawHtml, PrintType.RawHtml))">
            Print Raw Html
        </button>
//    var divcontent = document.getElementById("PrintDiv").innerHTML;

    <script>
        // run this function when the document is loaded
        window.onload = () => {
            // create a couple of elements in an otherwise empty HTML page
            const heading = document.createElement("h1");
            const headingText = document.createTextNode("Big Head!");
            heading.appendChild(headingText);
            document.body.appendChild(heading);
        };
    </script>
}

@code {
    private WeatherForecast[] forecasts;

    [Parameter]
    public string Param { get; set; }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
}
