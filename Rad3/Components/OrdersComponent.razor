@page "/orderscomponent"

@using GridMvc.Demo.Resources
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Sorting
@using GridShared.Utility
@using System
@using Microsoft.Extensions.Primitives
@using System.Globalization
@using System.Threading.Tasks
@using System.Timers
@using Rad3.Models.Domian
@using Rad3.Services

@inject IOrdersService       ordersService
@inject IOrderDetailsService orderDetailsService
@inject IEmployeesService    employeesService
@inject ICustomersService    customersService
@inject IProductsService     productsService
@inject IShippersService     shippersService
@inject IPrintingService     printingService

@if (_task.IsCompleted)
{
    <div class="font-italic small">
        <div class="col-sm-12 table-sm">
            <GridComponent T="Orders" Grid="@_grid"></GridComponent>
        </div>
    </div>
    <button @onclick="Print">Print</button>
}
else
{
    <p><em>Loading...</em></p>
}
@code
{
    private void Print()
    {
        string err = "You must select the row you want to print";

        if (order.OrderId == 0)
        {

        }
        else
        {
            //left right
            IEnumerable<OrderDetails> orderDetails = orderDetailsService.GetForOrderDetails(order.OrderId);

            string rawHtml2 = null;
            double dOrderTotal = 0;

            foreach (var orderDetail in orderDetails)
            {
                double dOriginalPrice = orderDetail.UnitPrice * orderDetail.Quantity;
                double dDiscountPrice = dOriginalPrice * orderDetail.Discount;
                double dListPrice = dOriginalPrice - dDiscountPrice;
                string unitPrice = string.Format("{0,0:C}", orderDetail.UnitPrice);
                string originalPrice = string.Format("{0,0:C}", dOriginalPrice);
                string discountPrice = string.Format("{0,0:C}", dDiscountPrice);
                string listPrice = string.Format("{0,0:C}", dListPrice);

                dOrderTotal = dOrderTotal + dListPrice;

                rawHtml2 = rawHtml2 +
                "<tr><td scope=\"row\">" +
                orderDetail.Product.ProductName + "</td><td>" +
                unitPrice + "</td><td>" +
                orderDetail.Quantity + "</td><td>" +
                originalPrice + "</td><td>" +
                orderDetail.Discount + "</td><td>" +
                discountPrice + "</td><td>" +
                listPrice + "</td>" +
                "</tr>";
            }

            string orderDate = string.Format("{0:d}", order.OrderDate);
            string requiredDate = string.Format("{0:d}", order.RequiredDate);
            string shippedDate = string.Format("{0:d}", order.ShippedDate);

            string orderTotal = string.Format("{0,0:C}", dOrderTotal);
            string orderFreight = string.Format("{0,0:C}", order.Freight);
            string total = string.Format("{0,0:C}", dOrderTotal + order.Freight);

            string rawHtml1 = string.Join(
              Environment.NewLine,
              "<!doctype html>",
              "<html lang=\"en-US\">",
              "<head>",
                 "<meta charset=\"UTF-8\" />",
                 "<style>table {width: 100%;} td {text-align: right;} td[scope='row'] {text-align: left;}</style>",
              "</head>",
              "<body>",
              "<h1>Order: " + order.OrderId + " - " + orderDate + "</h1>",
              "<h1>Total: " + total + "</h1>",
              "<h2>Required Date: " + requiredDate + " - Shipped Date: " + shippedDate + "</h2>",
              "<table><tr><td scope=\"row\">" + order.Customer.ContactName + " (" + order.Customer.ContactTitle + ")</br>",
              "<strong>Phone:</strong> " + order.Customer.Phone + " <strong>Fax:</strong> " + order.Customer.Fax + "</td>",
              "<td scope=\"row\"><strong>Employee:</strong> " + order.Employee.TitleOfCourtesy + " " + order.Employee.FirstName + " " + order.Employee.LastName + "</td></tr></table>",
              "<table><tr><td><strong>Bill To:</strong></td><td scope=\"row\">" + order.Customer.CompanyName + "</br>" + order.Customer.Address + "</br> ",
              order.Customer.City + ", " + order.Customer.Country + " " + order.Customer.PostalCode + " (" + order.Customer.Region + ")</td>",
              "<td><strong>Ship To:</strong></td><td scope=\"row\">" + order.ShipName + "</br>" + order.ShipAddress + "</br>",
              order.ShipCity + ", " + order.ShipCountry + " " + order.ShipPostalCode + " (" + order.ShipRegion + ")</td></tr></table>",
              "<table><tr><th>Product</th><th>Unit</br>Price</th><th>Quantity</th><th>Selling</br>Price</th><th>Discount</th><th>Discount</br>Price</th><th>Total</th></tr>");

            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td></td><td></td><td></td><td>----------</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td></td><td></td><td>Sub Total</td><td>" + orderTotal + "</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td></td><td></td><td>" + order.ShipViaNavigation.CompanyName + " - Freight</td><td>" + orderFreight + " </td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td></td><td></td><td></td><td>----------</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td></td><td></td><td>Total</td><td>" + total + "</td></tr>";
            rawHtml2 = rawHtml2 + "<tr><td></td><td></td><td></td><td></td><td></td><td></td><td>======</td></tr>";
            rawHtml2 = rawHtml2 + "</table>";

            string rawHtml = String.Join(
              Environment.NewLine,
              rawHtml1,
              rawHtml2,
              "</body></html>"
            );

            printingService.Print(rawHtml, PrintType.RawHtml);
        }
    }

    private CGrid<Orders> _grid;
    private Task _task;
    Func<object[], Task<ICGrid>> subEx;
    Timer timer;
    private GridComponent<Orders> _gridComponent;

    protected override async Task OnParametersSetAsync()
    {
        Action<IGridColumnCollection<Orders>> ordersColumns = c =>
        {
            c.Add(o => o.OrderId, false).Titled("Order").SetPrimaryKey(true).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.OrderDetails.Count, false).Titled("Details").SetCrudHidden(true);
            c.Add(o => o.OrderDate, false).Format("{0:yyyy-MM-dd}");
            c.Add(o => o.RequiredDate, false).Format("{0:yyyy-MM-dd}");
            c.Add(o => o.CustomerId, false).Titled("Customer")
                  .SetWidth(250).RenderValueAs(o => o.CustomerId == null ? "" : o.Customer.CompanyName)
                  .SetSelectField(true, o => o.CustomerId == null ? "" : o.CustomerId.ToString() + " - " + o.Customer.CompanyName,
                                   customersService.GetAllCustomers)
                  .SetListFilter(customersService.GetAllCustomers(), true, true);
            c.Add(o => o.EmployeeId, false).Titled("Employee")
                  .SetWidth(250).RenderValueAs(o => o.EmployeeId == null ? "" : o.Employee.FirstName + " " + o.Employee.LastName)
                  .SetSelectField(true, o => o.EmployeeId == null ? "" : o.EmployeeId.ToString() + " - " +
                                   o.Employee.FirstName + " " + o.Employee.LastName,
                                   employeesService.GetAllEmployees)
                  .SetListFilter(employeesService.GetAllEmployees(), true, true);
            c.Add(o => o.ShippedDate, false).Format("{0:yyyy-MM-dd}"); 
            c.Add(o => o.ShipVia, false).Titled("Ship Via")
                  .SetWidth(250).RenderValueAs(o => o.ShipVia == null ? "" : o.ShipViaNavigation.CompanyName)
                  .SetSelectField(true, o => o.ShipVia == null ? "" : o.ShipVia.ToString() + " - " + o.ShipViaNavigation.CompanyName,
                                   shippersService.GetAllShippers)
                  .SetListFilter(shippersService.GetAllShippers(), true, true);
            c.Add(o => o.Freight, false);
            c.Add(o => o.ShipName, false);
            c.Add(o => o.ShipAddress, false);
            c.Add(o => o.ShipCity, false);
            c.Add(o => o.ShipRegion, false);
            c.Add(o => o.ShipPostalCode, false);
            c.Add(o => o.ShipCountry, false);
        };

        Action<IGridColumnCollection<OrderDetails>> orderDetailsColumns = c =>
        {
            c.Add(o => o.OrderId, true).SetPrimaryKey(true).SetWidth(50).SetCrudHidden(true);
            c.Add(o => o.ProductId, false).SetPrimaryKey(true, false).SetCrudHidden(false, true, true, true)
                  .Titled("Product").SetWidth(250)
                  .RenderValueAs(o => o.Product.ProductName)
                  .SetSelectField(true, o => o.ProductId.ToString() + " - " + o.Product.ProductName,
                                  productsService.GetAllProducts)
                  .SetListFilter(productsService.GetAllProducts(), true, true);
            c.Add(o => o.UnitPrice, false);
            c.Add(o => o.Quantity, false);
            c.Add(o => o.Discount, false);
        };

        var locale = CultureInfo.CurrentCulture;
        SharedResource.Culture = locale;
        var query = new QueryDictionary<StringValues>();

        Func<object[], Task<ICGrid>> subGrids = async keys =>
        {
           int orderId = Int32.Parse(keys[0].ToString());

           var subGridClient = new GridClient<OrderDetails>(q => orderDetailsService.GetOrderDetailsGridRow(orderDetailsColumns, query, orderId),
              query, false, "orderDetailsGrid", orderDetailsColumns, locale)
           .Sortable()
           .Filterable()
           .SetKeyboard(true)
           .SetStriped(true)
           .WithMultipleFilters()
           .Searchable(true, false)
           .WithGridItemsCount()
           .ChangePageSize(true)
           .Selectable(true)
           .SetHeaderCrudButtons(true)
           .Crud(true, false, true, true, orderDetailsService)
           ;

           await subGridClient.UpdateGrid();
           return subGridClient.Grid;
        };

        subEx = subGrids;

        var client = GridClient(ordersColumns, query, locale);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;

        Start();
    }

    IGridClient<Orders> GridClient(Action<IGridColumnCollection<Orders>> ordersColumns, 
                                   QueryDictionary<StringValues> query,
                                   CultureInfo locale)
    {
        IGridClient<Orders> subGridClient = new GridClient<Orders>(q => ordersService.GetOrdersGridRow(ordersColumns, query),
              query, false, "ordersGrid", ordersColumns, locale)
           .Sortable()
           .Filterable()
           .SetKeyboard(true)
           .Groupable(true)
           .SetStriped(true)
           .WithMultipleFilters()
           .Searchable(true, false)
           .WithGridItemsCount()
           .ChangePageSize(true)
           .Selectable(true)
           .SetHeaderCrudButtons(true)
           .Crud(true, false, true, true, ordersService)
           .SubGrid(subEx, ("OrderId", "OrderId"))
           ;

        return subGridClient;
    }

    public void Start()
    {
        if (timer == null)
        {
            timer = new Timer();
            timer.Interval = 500;
            timer.Elapsed += TimerOnElapsed;
        }

        timer.Start();
    }

    Orders order = new Orders();

    protected async void OnRowClicked(object item)
    {
        if (item.GetType() == typeof(Orders))
        {
            order = (Orders)item;
        }
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        if (timer != null && _gridComponent != null)
        {
            timer.Stop();
            Dispose();

            _gridComponent.OnRowClicked = OnRowClicked;
        }
        else
            _gridComponent = _grid.GridComponent;
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }
}
